/*
 * OpenDota API
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 
 *
 * OpenAPI spec version: 17.6.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse20014;
import io.swagger.client.model.InlineResponse20021;
import io.swagger.client.model.InlineResponse20023;
import io.swagger.client.model.InlineResponse20024;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HeroesApi {
    private ApiClient apiClient;

    public HeroesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HeroesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for heroesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call heroesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heroes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call heroesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = heroesGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /heroes
     * Get hero data
     * @return List&lt;InlineResponse20021&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20021> heroesGet() throws ApiException {
        ApiResponse<List<InlineResponse20021>> resp = heroesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * GET /heroes
     * Get hero data
     * @return ApiResponse&lt;List&lt;InlineResponse20021&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20021>> heroesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = heroesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20021>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /heroes (asynchronously)
     * Get hero data
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call heroesGetAsync(final ApiCallback<List<InlineResponse20021>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = heroesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20021>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for heroesHeroIdDurationsGet
     * @param heroId Hero ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call heroesHeroIdDurationsGetCall(Integer heroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heroes/{hero_id}/durations"
            .replaceAll("\\{" + "hero_id" + "\\}", apiClient.escapeString(heroId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call heroesHeroIdDurationsGetValidateBeforeCall(Integer heroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'heroId' is set
        if (heroId == null) {
            throw new ApiException("Missing the required parameter 'heroId' when calling heroesHeroIdDurationsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = heroesHeroIdDurationsGetCall(heroId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /heroes/{hero_id}/durations
     * Get hero performance over a range of match durations
     * @param heroId Hero ID (required)
     * @return List&lt;InlineResponse20024&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20024> heroesHeroIdDurationsGet(Integer heroId) throws ApiException {
        ApiResponse<List<InlineResponse20024>> resp = heroesHeroIdDurationsGetWithHttpInfo(heroId);
        return resp.getData();
    }

    /**
     * GET /heroes/{hero_id}/durations
     * Get hero performance over a range of match durations
     * @param heroId Hero ID (required)
     * @return ApiResponse&lt;List&lt;InlineResponse20024&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20024>> heroesHeroIdDurationsGetWithHttpInfo(Integer heroId) throws ApiException {
        com.squareup.okhttp.Call call = heroesHeroIdDurationsGetValidateBeforeCall(heroId, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20024>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /heroes/{hero_id}/durations (asynchronously)
     * Get hero performance over a range of match durations
     * @param heroId Hero ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call heroesHeroIdDurationsGetAsync(Integer heroId, final ApiCallback<List<InlineResponse20024>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = heroesHeroIdDurationsGetValidateBeforeCall(heroId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20024>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for heroesHeroIdMatchesGet
     * @param heroId Hero ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call heroesHeroIdMatchesGetCall(Integer heroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heroes/{hero_id}/matches"
            .replaceAll("\\{" + "hero_id" + "\\}", apiClient.escapeString(heroId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call heroesHeroIdMatchesGetValidateBeforeCall(Integer heroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'heroId' is set
        if (heroId == null) {
            throw new ApiException("Missing the required parameter 'heroId' when calling heroesHeroIdMatchesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = heroesHeroIdMatchesGetCall(heroId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /heroes/{hero_id}/matches
     * Get recent matches with a hero
     * @param heroId Hero ID (required)
     * @return List&lt;InlineResponse20014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20014> heroesHeroIdMatchesGet(Integer heroId) throws ApiException {
        ApiResponse<List<InlineResponse20014>> resp = heroesHeroIdMatchesGetWithHttpInfo(heroId);
        return resp.getData();
    }

    /**
     * GET /heroes/{hero_id}/matches
     * Get recent matches with a hero
     * @param heroId Hero ID (required)
     * @return ApiResponse&lt;List&lt;InlineResponse20014&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20014>> heroesHeroIdMatchesGetWithHttpInfo(Integer heroId) throws ApiException {
        com.squareup.okhttp.Call call = heroesHeroIdMatchesGetValidateBeforeCall(heroId, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20014>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /heroes/{hero_id}/matches (asynchronously)
     * Get recent matches with a hero
     * @param heroId Hero ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call heroesHeroIdMatchesGetAsync(Integer heroId, final ApiCallback<List<InlineResponse20014>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = heroesHeroIdMatchesGetValidateBeforeCall(heroId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20014>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for heroesHeroIdMatchupsGet
     * @param heroId Hero ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call heroesHeroIdMatchupsGetCall(Integer heroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heroes/{hero_id}/matchups"
            .replaceAll("\\{" + "hero_id" + "\\}", apiClient.escapeString(heroId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call heroesHeroIdMatchupsGetValidateBeforeCall(Integer heroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'heroId' is set
        if (heroId == null) {
            throw new ApiException("Missing the required parameter 'heroId' when calling heroesHeroIdMatchupsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = heroesHeroIdMatchupsGetCall(heroId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /heroes/{hero_id}/matchups
     * Get results against other heroes for a hero
     * @param heroId Hero ID (required)
     * @return List&lt;InlineResponse20023&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20023> heroesHeroIdMatchupsGet(Integer heroId) throws ApiException {
        ApiResponse<List<InlineResponse20023>> resp = heroesHeroIdMatchupsGetWithHttpInfo(heroId);
        return resp.getData();
    }

    /**
     * GET /heroes/{hero_id}/matchups
     * Get results against other heroes for a hero
     * @param heroId Hero ID (required)
     * @return ApiResponse&lt;List&lt;InlineResponse20023&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20023>> heroesHeroIdMatchupsGetWithHttpInfo(Integer heroId) throws ApiException {
        com.squareup.okhttp.Call call = heroesHeroIdMatchupsGetValidateBeforeCall(heroId, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20023>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /heroes/{hero_id}/matchups (asynchronously)
     * Get results against other heroes for a hero
     * @param heroId Hero ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call heroesHeroIdMatchupsGetAsync(Integer heroId, final ApiCallback<List<InlineResponse20023>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = heroesHeroIdMatchupsGetValidateBeforeCall(heroId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20023>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for heroesHeroIdPlayersGet
     * @param heroId Hero ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call heroesHeroIdPlayersGetCall(Integer heroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heroes/{hero_id}/players"
            .replaceAll("\\{" + "hero_id" + "\\}", apiClient.escapeString(heroId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call heroesHeroIdPlayersGetValidateBeforeCall(Integer heroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'heroId' is set
        if (heroId == null) {
            throw new ApiException("Missing the required parameter 'heroId' when calling heroesHeroIdPlayersGet(Async)");
        }
        

        com.squareup.okhttp.Call call = heroesHeroIdPlayersGetCall(heroId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /heroes/{hero_id}/players
     * Get players who have played this hero
     * @param heroId Hero ID (required)
     * @return List&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<List<Object>> heroesHeroIdPlayersGet(Integer heroId) throws ApiException {
        ApiResponse<List<List<Object>>> resp = heroesHeroIdPlayersGetWithHttpInfo(heroId);
        return resp.getData();
    }

    /**
     * GET /heroes/{hero_id}/players
     * Get players who have played this hero
     * @param heroId Hero ID (required)
     * @return ApiResponse&lt;List&lt;List&lt;Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<List<Object>>> heroesHeroIdPlayersGetWithHttpInfo(Integer heroId) throws ApiException {
        com.squareup.okhttp.Call call = heroesHeroIdPlayersGetValidateBeforeCall(heroId, null, null);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /heroes/{hero_id}/players (asynchronously)
     * Get players who have played this hero
     * @param heroId Hero ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call heroesHeroIdPlayersGetAsync(Integer heroId, final ApiCallback<List<List<Object>>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = heroesHeroIdPlayersGetValidateBeforeCall(heroId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
