/*
 * OpenDota API
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 
 *
 * OpenAPI spec version: 17.6.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse20010;
import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse2005;
import io.swagger.client.model.InlineResponse2006;
import io.swagger.client.model.InlineResponse2007;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.InlineResponse2009;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlayersApi {
    private ApiClient apiClient;

    public PlayersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlayersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for playersAccountIdCountsGet
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdCountsGetCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/counts"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (win != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("win", win));
        if (patch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("patch", patch));
        if (gameMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game_mode", gameMode));
        if (lobbyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lobby_type", lobbyType));
        if (region != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("region", region));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (laneRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lane_role", laneRole));
        if (heroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hero_id", heroId));
        if (isRadiant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_radiant", isRadiant));
        if (includedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_account_id", includedAccountId));
        if (excludedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excluded_account_id", excludedAccountId));
        if (withHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hero_id", withHeroId));
        if (againstHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("against_hero_id", againstHeroId));
        if (significant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("significant", significant));
        if (having != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("having", having));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdCountsGetValidateBeforeCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdCountsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdCountsGetCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/counts
     * Counts in categories
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2009 playersAccountIdCountsGet(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        ApiResponse<InlineResponse2009> resp = playersAccountIdCountsGetWithHttpInfo(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/counts
     * Counts in categories
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2009> playersAccountIdCountsGetWithHttpInfo(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdCountsGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/counts (asynchronously)
     * Counts in categories
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdCountsGetAsync(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ApiCallback<InlineResponse2009> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdCountsGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdGet
     * @param accountId Steam32 account ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdGetCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdGetValidateBeforeCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdGetCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}
     * Player data
     * @param accountId Steam32 account ID (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 playersAccountIdGet(Integer accountId) throws ApiException {
        ApiResponse<InlineResponse2001> resp = playersAccountIdGetWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}
     * Player data
     * @param accountId Steam32 account ID (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> playersAccountIdGetWithHttpInfo(Integer accountId) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdGetValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id} (asynchronously)
     * Player data
     * @param accountId Steam32 account ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdGetAsync(Integer accountId, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdGetValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdHeroesGet
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdHeroesGetCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/heroes"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (win != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("win", win));
        if (patch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("patch", patch));
        if (gameMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game_mode", gameMode));
        if (lobbyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lobby_type", lobbyType));
        if (region != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("region", region));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (laneRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lane_role", laneRole));
        if (heroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hero_id", heroId));
        if (isRadiant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_radiant", isRadiant));
        if (includedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_account_id", includedAccountId));
        if (excludedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excluded_account_id", excludedAccountId));
        if (withHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hero_id", withHeroId));
        if (againstHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("against_hero_id", againstHeroId));
        if (significant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("significant", significant));
        if (having != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("having", having));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdHeroesGetValidateBeforeCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdHeroesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdHeroesGetCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/heroes
     * Heroes played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return List&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2005> playersAccountIdHeroesGet(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        ApiResponse<List<InlineResponse2005>> resp = playersAccountIdHeroesGetWithHttpInfo(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/heroes
     * Heroes played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse2005&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2005>> playersAccountIdHeroesGetWithHttpInfo(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdHeroesGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2005>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/heroes (asynchronously)
     * Heroes played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdHeroesGetAsync(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ApiCallback<List<InlineResponse2005>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdHeroesGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2005>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdHistogramsFieldGet
     * @param accountId Steam32 account ID (required)
     * @param field Field to aggregate on (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdHistogramsFieldGetCall(Integer accountId, String field, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/histograms/{field}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "field" + "\\}", apiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (win != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("win", win));
        if (patch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("patch", patch));
        if (gameMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game_mode", gameMode));
        if (lobbyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lobby_type", lobbyType));
        if (region != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("region", region));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (laneRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lane_role", laneRole));
        if (heroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hero_id", heroId));
        if (isRadiant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_radiant", isRadiant));
        if (includedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_account_id", includedAccountId));
        if (excludedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excluded_account_id", excludedAccountId));
        if (withHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hero_id", withHeroId));
        if (againstHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("against_hero_id", againstHeroId));
        if (significant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("significant", significant));
        if (having != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("having", having));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdHistogramsFieldGetValidateBeforeCall(Integer accountId, String field, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdHistogramsFieldGet(Async)");
        }
        
        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling playersAccountIdHistogramsFieldGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdHistogramsFieldGetCall(accountId, field, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/histograms
     * Distribution of matches in a single stat
     * @param accountId Steam32 account ID (required)
     * @param field Field to aggregate on (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> playersAccountIdHistogramsFieldGet(Integer accountId, String field, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        ApiResponse<List<Object>> resp = playersAccountIdHistogramsFieldGetWithHttpInfo(accountId, field, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/histograms
     * Distribution of matches in a single stat
     * @param accountId Steam32 account ID (required)
     * @param field Field to aggregate on (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> playersAccountIdHistogramsFieldGetWithHttpInfo(Integer accountId, String field, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdHistogramsFieldGetValidateBeforeCall(accountId, field, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/histograms (asynchronously)
     * Distribution of matches in a single stat
     * @param accountId Steam32 account ID (required)
     * @param field Field to aggregate on (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdHistogramsFieldGetAsync(Integer accountId, String field, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdHistogramsFieldGetValidateBeforeCall(accountId, field, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdMatchesGet
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param project Fields to project (array) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdMatchesGetCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, String project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/matches"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (win != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("win", win));
        if (patch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("patch", patch));
        if (gameMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game_mode", gameMode));
        if (lobbyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lobby_type", lobbyType));
        if (region != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("region", region));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (laneRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lane_role", laneRole));
        if (heroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hero_id", heroId));
        if (isRadiant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_radiant", isRadiant));
        if (includedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_account_id", includedAccountId));
        if (excludedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excluded_account_id", excludedAccountId));
        if (withHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hero_id", withHeroId));
        if (againstHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("against_hero_id", againstHeroId));
        if (significant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("significant", significant));
        if (having != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("having", having));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (project != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("project", project));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdMatchesGetValidateBeforeCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, String project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdMatchesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdMatchesGetCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, project, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/matches
     * Matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param project Fields to project (array) (optional)
     * @return List&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2004> playersAccountIdMatchesGet(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, String project) throws ApiException {
        ApiResponse<List<InlineResponse2004>> resp = playersAccountIdMatchesGetWithHttpInfo(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, project);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/matches
     * Matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param project Fields to project (array) (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse2004&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2004>> playersAccountIdMatchesGetWithHttpInfo(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, String project) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdMatchesGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, project, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2004>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/matches (asynchronously)
     * Matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param project Fields to project (array) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdMatchesGetAsync(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, String project, final ApiCallback<List<InlineResponse2004>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdMatchesGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, project, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2004>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdPeersGet
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdPeersGetCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/peers"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (win != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("win", win));
        if (patch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("patch", patch));
        if (gameMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game_mode", gameMode));
        if (lobbyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lobby_type", lobbyType));
        if (region != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("region", region));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (laneRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lane_role", laneRole));
        if (heroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hero_id", heroId));
        if (isRadiant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_radiant", isRadiant));
        if (includedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_account_id", includedAccountId));
        if (excludedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excluded_account_id", excludedAccountId));
        if (withHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hero_id", withHeroId));
        if (againstHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("against_hero_id", againstHeroId));
        if (significant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("significant", significant));
        if (having != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("having", having));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdPeersGetValidateBeforeCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdPeersGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdPeersGetCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/peers
     * Players played with
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return List&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2006> playersAccountIdPeersGet(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        ApiResponse<List<InlineResponse2006>> resp = playersAccountIdPeersGetWithHttpInfo(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/peers
     * Players played with
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse2006&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2006>> playersAccountIdPeersGetWithHttpInfo(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdPeersGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2006>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/peers (asynchronously)
     * Players played with
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdPeersGetAsync(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ApiCallback<List<InlineResponse2006>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdPeersGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2006>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdProsGet
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdProsGetCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/pros"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (win != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("win", win));
        if (patch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("patch", patch));
        if (gameMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game_mode", gameMode));
        if (lobbyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lobby_type", lobbyType));
        if (region != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("region", region));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (laneRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lane_role", laneRole));
        if (heroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hero_id", heroId));
        if (isRadiant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_radiant", isRadiant));
        if (includedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_account_id", includedAccountId));
        if (excludedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excluded_account_id", excludedAccountId));
        if (withHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hero_id", withHeroId));
        if (againstHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("against_hero_id", againstHeroId));
        if (significant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("significant", significant));
        if (having != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("having", having));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdProsGetValidateBeforeCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdProsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdProsGetCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/pros
     * Pro players played with
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return List&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2007> playersAccountIdProsGet(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        ApiResponse<List<InlineResponse2007>> resp = playersAccountIdProsGetWithHttpInfo(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/pros
     * Pro players played with
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse2007&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2007>> playersAccountIdProsGetWithHttpInfo(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdProsGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2007>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/pros (asynchronously)
     * Pro players played with
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdProsGetAsync(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ApiCallback<List<InlineResponse2007>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdProsGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2007>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdRankingsGet
     * @param accountId Steam32 account ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdRankingsGetCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/rankings"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdRankingsGetValidateBeforeCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdRankingsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdRankingsGetCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/rankings
     * Player hero rankings
     * @param accountId Steam32 account ID (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> playersAccountIdRankingsGet(Integer accountId) throws ApiException {
        ApiResponse<List<Object>> resp = playersAccountIdRankingsGetWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/rankings
     * Player hero rankings
     * @param accountId Steam32 account ID (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> playersAccountIdRankingsGetWithHttpInfo(Integer accountId) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdRankingsGetValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/rankings (asynchronously)
     * Player hero rankings
     * @param accountId Steam32 account ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdRankingsGetAsync(Integer accountId, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdRankingsGetValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdRatingsGet
     * @param accountId Steam32 account ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdRatingsGetCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/ratings"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdRatingsGetValidateBeforeCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdRatingsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdRatingsGetCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/ratings
     * Player rating history
     * @param accountId Steam32 account ID (required)
     * @return List&lt;InlineResponse20012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20012> playersAccountIdRatingsGet(Integer accountId) throws ApiException {
        ApiResponse<List<InlineResponse20012>> resp = playersAccountIdRatingsGetWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/ratings
     * Player rating history
     * @param accountId Steam32 account ID (required)
     * @return ApiResponse&lt;List&lt;InlineResponse20012&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20012>> playersAccountIdRatingsGetWithHttpInfo(Integer accountId) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdRatingsGetValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20012>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/ratings (asynchronously)
     * Player rating history
     * @param accountId Steam32 account ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdRatingsGetAsync(Integer accountId, final ApiCallback<List<InlineResponse20012>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdRatingsGetValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20012>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdRecentMatchesGet
     * @param accountId Steam32 account ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdRecentMatchesGetCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/recentMatches"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdRecentMatchesGetValidateBeforeCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdRecentMatchesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdRecentMatchesGetCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/recentMatches
     * Recent matches played
     * @param accountId Steam32 account ID (required)
     * @return List&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2003> playersAccountIdRecentMatchesGet(Integer accountId) throws ApiException {
        ApiResponse<List<InlineResponse2003>> resp = playersAccountIdRecentMatchesGetWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/recentMatches
     * Recent matches played
     * @param accountId Steam32 account ID (required)
     * @return ApiResponse&lt;List&lt;InlineResponse2003&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2003>> playersAccountIdRecentMatchesGetWithHttpInfo(Integer accountId) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdRecentMatchesGetValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2003>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/recentMatches (asynchronously)
     * Recent matches played
     * @param accountId Steam32 account ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdRecentMatchesGetAsync(Integer accountId, final ApiCallback<List<InlineResponse2003>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdRecentMatchesGetValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2003>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdRefreshPost
     * @param accountId Steam32 account ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdRefreshPostCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/refresh"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdRefreshPostValidateBeforeCall(Integer accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdRefreshPost(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdRefreshPostCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * POST /players/{account_id}/refresh
     * Refresh player match history
     * @param accountId Steam32 account ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object playersAccountIdRefreshPost(Integer accountId) throws ApiException {
        ApiResponse<Object> resp = playersAccountIdRefreshPostWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * POST /players/{account_id}/refresh
     * Refresh player match history
     * @param accountId Steam32 account ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> playersAccountIdRefreshPostWithHttpInfo(Integer accountId) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdRefreshPostValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * POST /players/{account_id}/refresh (asynchronously)
     * Refresh player match history
     * @param accountId Steam32 account ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdRefreshPostAsync(Integer accountId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdRefreshPostValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdTotalsGet
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdTotalsGetCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/totals"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (win != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("win", win));
        if (patch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("patch", patch));
        if (gameMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game_mode", gameMode));
        if (lobbyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lobby_type", lobbyType));
        if (region != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("region", region));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (laneRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lane_role", laneRole));
        if (heroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hero_id", heroId));
        if (isRadiant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_radiant", isRadiant));
        if (includedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_account_id", includedAccountId));
        if (excludedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excluded_account_id", excludedAccountId));
        if (withHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hero_id", withHeroId));
        if (againstHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("against_hero_id", againstHeroId));
        if (significant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("significant", significant));
        if (having != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("having", having));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdTotalsGetValidateBeforeCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdTotalsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdTotalsGetCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/totals
     * Totals in stats
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return List&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse2008> playersAccountIdTotalsGet(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        ApiResponse<List<InlineResponse2008>> resp = playersAccountIdTotalsGetWithHttpInfo(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/totals
     * Totals in stats
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse2008&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse2008>> playersAccountIdTotalsGetWithHttpInfo(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdTotalsGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2008>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/totals (asynchronously)
     * Totals in stats
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdTotalsGetAsync(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ApiCallback<List<InlineResponse2008>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdTotalsGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2008>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdWardmapGet
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdWardmapGetCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/wardmap"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (win != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("win", win));
        if (patch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("patch", patch));
        if (gameMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game_mode", gameMode));
        if (lobbyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lobby_type", lobbyType));
        if (region != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("region", region));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (laneRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lane_role", laneRole));
        if (heroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hero_id", heroId));
        if (isRadiant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_radiant", isRadiant));
        if (includedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_account_id", includedAccountId));
        if (excludedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excluded_account_id", excludedAccountId));
        if (withHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hero_id", withHeroId));
        if (againstHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("against_hero_id", againstHeroId));
        if (significant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("significant", significant));
        if (having != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("having", having));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdWardmapGetValidateBeforeCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdWardmapGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdWardmapGetCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/wardmap
     * Wards placed in matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return InlineResponse20010
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20010 playersAccountIdWardmapGet(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        ApiResponse<InlineResponse20010> resp = playersAccountIdWardmapGetWithHttpInfo(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/wardmap
     * Wards placed in matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return ApiResponse&lt;InlineResponse20010&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20010> playersAccountIdWardmapGetWithHttpInfo(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdWardmapGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/wardmap (asynchronously)
     * Wards placed in matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdWardmapGetAsync(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ApiCallback<InlineResponse20010> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdWardmapGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdWlGet
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdWlGetCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/wl"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (win != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("win", win));
        if (patch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("patch", patch));
        if (gameMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game_mode", gameMode));
        if (lobbyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lobby_type", lobbyType));
        if (region != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("region", region));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (laneRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lane_role", laneRole));
        if (heroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hero_id", heroId));
        if (isRadiant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_radiant", isRadiant));
        if (includedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_account_id", includedAccountId));
        if (excludedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excluded_account_id", excludedAccountId));
        if (withHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hero_id", withHeroId));
        if (againstHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("against_hero_id", againstHeroId));
        if (significant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("significant", significant));
        if (having != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("having", having));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdWlGetValidateBeforeCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdWlGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdWlGetCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/wl
     * Win/Loss count
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 playersAccountIdWlGet(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        ApiResponse<InlineResponse2002> resp = playersAccountIdWlGetWithHttpInfo(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/wl
     * Win/Loss count
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> playersAccountIdWlGetWithHttpInfo(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdWlGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/wl (asynchronously)
     * Win/Loss count
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdWlGetAsync(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdWlGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for playersAccountIdWordcloudGet
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdWordcloudGetCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{account_id}/wordcloud"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (win != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("win", win));
        if (patch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("patch", patch));
        if (gameMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("game_mode", gameMode));
        if (lobbyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lobby_type", lobbyType));
        if (region != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("region", region));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (laneRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lane_role", laneRole));
        if (heroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hero_id", heroId));
        if (isRadiant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_radiant", isRadiant));
        if (includedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("included_account_id", includedAccountId));
        if (excludedAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excluded_account_id", excludedAccountId));
        if (withHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_hero_id", withHeroId));
        if (againstHeroId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("against_hero_id", againstHeroId));
        if (significant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("significant", significant));
        if (having != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("having", having));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call playersAccountIdWordcloudGetValidateBeforeCall(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling playersAccountIdWordcloudGet(Async)");
        }
        

        com.squareup.okhttp.Call call = playersAccountIdWordcloudGetCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * GET /players/{account_id}/wordcloud
     * Words said/read in matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return InlineResponse20011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20011 playersAccountIdWordcloudGet(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        ApiResponse<InlineResponse20011> resp = playersAccountIdWordcloudGetWithHttpInfo(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort);
        return resp.getData();
    }

    /**
     * GET /players/{account_id}/wordcloud
     * Words said/read in matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @return ApiResponse&lt;InlineResponse20011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20011> playersAccountIdWordcloudGetWithHttpInfo(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort) throws ApiException {
        com.squareup.okhttp.Call call = playersAccountIdWordcloudGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET /players/{account_id}/wordcloud (asynchronously)
     * Words said/read in matches played
     * @param accountId Steam32 account ID (required)
     * @param limit Number of matches to limit to (optional)
     * @param offset Number of matches to offset start by (optional)
     * @param win Whether the player won (optional)
     * @param patch Patch ID (optional)
     * @param gameMode Game Mode ID (optional)
     * @param lobbyType Lobby type ID (optional)
     * @param region Region ID (optional)
     * @param date Days previous (optional)
     * @param laneRole Lane Role ID (optional)
     * @param heroId Hero ID (optional)
     * @param isRadiant Whether the player was radiant (optional)
     * @param includedAccountId Account IDs in the match (array) (optional)
     * @param excludedAccountId Account IDs not in the match (array) (optional)
     * @param withHeroId Hero IDs on the player&#39;s team (array) (optional)
     * @param againstHeroId Hero IDs against the player&#39;s team (array) (optional)
     * @param significant Whether the match was significant for aggregation purposes (optional)
     * @param having The minimum number of games played, for filtering hero stats (optional)
     * @param sort The field to return matches sorted by in descending order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call playersAccountIdWordcloudGetAsync(Integer accountId, Integer limit, Integer offset, Integer win, Integer patch, Integer gameMode, Integer lobbyType, Integer region, Integer date, Integer laneRole, Integer heroId, Integer isRadiant, Integer includedAccountId, Integer excludedAccountId, Integer withHeroId, Integer againstHeroId, Integer significant, Integer having, String sort, final ApiCallback<InlineResponse20011> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = playersAccountIdWordcloudGetValidateBeforeCall(accountId, limit, offset, win, patch, gameMode, lobbyType, region, date, laneRole, heroId, isRadiant, includedAccountId, excludedAccountId, withHeroId, againstHeroId, significant, having, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
